{"version":3,"sources":["componentes/serviceWorker.js","componentes/Item.js","FatherItem.js","ItemList.js","index.js"],"names":["Boolean","window","location","hostname","match","Item","className","this","props","quantity","name","description","category","price","React","Component","ItemContent","ItemList","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qLAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,uDCASC,E,iLAdX,OACE,yBAAKC,UAAU,QACb,wBAAIA,UAAU,YAAYC,KAAKC,MAAMC,UACrC,6BACE,4BAAKF,KAAKC,MAAME,MAChB,wBAAIJ,UAAU,cAAcC,KAAKC,MAAMG,cAEzC,yBAAKL,UAAU,oBAAoBC,KAAKC,MAAMI,UAC9C,wBAAIN,UAAU,SAASC,KAAKC,MAAMK,MAAlC,e,GAVWC,IAAMC,WCGVC,EAFK,kBAAC,EAAD,CAAMN,KAAK,yBAAyBC,YAAY,iCAAiCF,SAAU,EAAGG,SAAS,WAAWC,MAAO,ICe9HI,E,iLAbX,OACE,wBAAIX,UAAU,aACZ,4BACE,kBAAC,EAAD,CAAMI,KAAK,yBAAyBC,YAAY,iCAAiCF,SAAU,EAAGG,SAAS,WAAWC,MAAO,KAE3H,4BACE,kBAAC,EAAD,CAAMH,KAAK,wBAAwBC,YAAY,+BAA+BF,SAAU,EAAGG,SAAS,YAAYC,MAAO,W,GAR1GC,IAAMC,WCI7BG,IAASC,OAAOH,EAAaI,SAASC,eAAe,SACrDH,IAASC,OAAOF,EAAUG,SAASC,eAAe,SJyH5C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,gB","file":"static/js/main.67a8b1ca.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\n\nclass Item extends React.Component {\n  render() {\n    return (\n      <div className=\"item\">\n        <h5 className=\"quantity\">{this.props.quantity}</h5>\n        <div>\n          <h5>{this.props.name}</h5>\n          <h6 className=\"text-muted\">{this.props.description}</h6>\n        </div>\n        <div className=\"badge badge-info\">{this.props.category}</div>\n        <h5 className=\"price\">{this.props.price}â‚¬</h5>\n      </div>\n    );\n  }\n}\n\nexport default Item;\n","import React from \"react\";\nimport Item from \"./componentes/Item\";\n\nconst ItemContent = <Item name=\"Cereales con chocolate\" description=\"Cereales rellenos de chocolate\" quantity={2} category=\"Cereales\" price={5} />;\n\nexport default ItemContent;\n","import React from \"react\";\nimport Item from \"./componentes/Item\";\n\nclass ItemList extends React.Component {\n  render() {\n    return (\n      <ul className=\"item-list\">\n        <li>\n          <Item name=\"Cereales con chocolate\" description=\"Cereales rellenos de chocolate\" quantity={2} category=\"Cereales\" price={5} />\n        </li>\n        <li>\n          <Item name=\"Hamburguesa con queso\" description=\"Hamburguesa rica y saludable\" quantity={1} category=\"Fast-food\" price={15} />\n        </li>\n      </ul>\n    );\n  }\n}\n\nexport default ItemList;\n","import ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport * as serviceWorker from \"./componentes/serviceWorker\";\n\nimport ItemContent from \"./FatherItem\";\nimport ItemList from \"./ItemList\";\n\nReactDOM.render(ItemContent, document.getElementById(\"root\"));\nReactDOM.render(ItemList, document.getElementById(\"root\"));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}